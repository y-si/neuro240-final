**AVL Tree Overview**
=====================

An AVL (Adelson-Velsky and Landis) tree is a self-balancing binary search tree data structure. It is a type of binary search tree that ensures the height of the tree remains relatively small by rotating nodes when the balance factor becomes too large. This property makes AVL trees suitable for applications where search, insertion, and deletion operations are frequent.

**Balance Factor**
-----------------

The balance factor of a node in an AVL tree is calculated as the height of the left subtree minus the height of the right subtree. The balance factor can be:

*   -1 (right-heavy)
*   0 (balanced)
*   1 (left-heavy)

**Balance Maintenance**
----------------------

AVL trees maintain balance by performing rotations when the balance factor becomes too large. There are four types of rotations:

### 1. Left Rotation (LL Rotation)

When a node is inserted in the left subtree of the left child of a node, the balance factor becomes too large (2). To balance the tree, a left rotation is performed.

```markdown
    4
   / \
  2   5
 / \
1   3
```

After inserting a new node (0) in the left subtree of the left child (1):

```markdown
    4
   / \
  2   5
 / \
1   3
/
0
```

Left rotation:

```markdown
  2
 / \
1   4
/   / \
0   3   5
```

### 2. Right Rotation (RR Rotation)

When a node is inserted in the right subtree of the right child of a node, the balance factor becomes too large (-2). To balance the tree, a right rotation is performed.

```markdown
    2
   / \
  1   4
     / \
    3   5
```

After inserting a new node (6) in the right subtree of the right child (5):

```markdown
    2
   / \
  1   4
     / \
    3   5
           \
            6
```

Right rotation:

```markdown
  4
 / \
2   5
/   \
1   3
     \
      6
```

### 3. Left-Right Rotation (LR Rotation)

When a node is inserted in the right subtree of the left child of a node, the balance factor becomes too large (2). To balance the tree, a left-right rotation is performed.

```markdown
    4
   / \
  2   5
 / \
1   3
```

After inserting a new node (6) in the right subtree of the left child (3):

```markdown
    4
   / \
  2   5
 / \
1   3
     \
      6
```

Left-right rotation:

```markdown
  3
 / \
1   4
   / \
  2   5
       \
        6
```

### 4. Right-Left Rotation (RL Rotation)

When a node is inserted in the left subtree of the right child of a node, the balance factor becomes too large (-2). To balance the tree, a right-left rotation is performed.

```markdown
    2
   / \
  1   4
     / \
    3   5
```

After inserting a new node (0) in the left subtree of the right child (3):

```markdown
    2
   / \
  1   4
     / \
    3   5
   /
  0
```

Right-left rotation:

```markdown
  3
 / \
0   4
 \   / \
  1   2   5
```

**Example Use Case**
--------------------

Here's an example implementation of an AVL tree in Python:

```python
class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1

class AVLTree:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert(self.root, key)

    def _insert(self, node, key):
        if not node:
            return Node(key)
        if key < node.key:
            node.left = self._insert(node.left, key)
        else:
            node.right = self._insert(node.right, key)

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))

        balance_factor = self._get_balance_factor(node)

        if balance_factor > 1:
            if key < node.left.key:
                return self._right_rotate(node)
            else:
                node.left = self._left_rotate(node.left)
                return self._right_rotate(node)

        if balance_factor < -1:
            if key > node.right.key:
                return self._left_rotate(node)
            else:
                node.right = self._right_rotate(node.right)
                return self._left_rotate(node)

        return node

    def _get_height(self, node):
        if not node:
            return 0
        return node.height

    def _get_balance_factor(self, node):
        if not node:
            return 0
        return self._get_height(node.left) - self._get_height(node.right)

    def _left_rotate(self, node):
        temp = node.right
        node.right = temp.left
        temp.left = node

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))
        temp.height = 1 + max(self._get_height(temp.left), self._get_height(temp.right))

        return temp

    def _right_rotate(self, node):
        temp = node.left
        node.left = temp.right
        temp.right = node

        node.height = 1 + max(self._get_height(node.left), self._get_height(node.right))
        temp.height = 1 + max(self._get_height(temp.left), self._get_height(temp.right))

        return temp

    def inorder(self):
        self._inorder(self.root)

    def _inorder(self, node):
        if node:
            self._inorder(node.left)
            print(node.key, end=" ")
            self._inorder(node.right)

# Example usage:
tree = AVLTree()
tree.insert(10)
tree.insert(20)
tree.insert(30)
tree.insert(40)
tree.insert(50)
tree.insert(25)

print("Inorder traversal:")
tree.inorder()
```

This implementation provides basic operations like insertion and inorder traversal. The `insert` method inserts a new node into the tree while maintaining the balance property. The `inorder` method performs an inorder traversal of the tree, printing the keys in ascending order.