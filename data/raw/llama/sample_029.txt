**K-Means Clustering Algorithm**
=====================================

The K-means clustering algorithm is a widely used unsupervised machine learning technique for partitioning a dataset into K distinct clusters based on their similarities. Here's a step-by-step explanation of how it works:

**Initialization**
-----------------

1. **Choose the number of clusters (K)**: The algorithm requires the user to specify the number of clusters (K) they want to identify in the dataset.
2. **Randomly initialize centroids**: The algorithm randomly selects K data points from the dataset as the initial centroids of the clusters.

**Iteration**
-------------

1. **Assign data points to clusters**: For each data point in the dataset, calculate the Euclidean distance (or another distance metric) to each centroid. Assign the data point to the cluster with the closest centroid.
2. **Update centroids**: For each cluster, calculate the mean of all data points assigned to that cluster. Update the centroid of the cluster to be the new mean.

**Convergence**
--------------

1. **Repeat iteration**: Repeat steps 1-2 until the centroids no longer change significantly or a stopping criterion is met (e.g., maximum number of iterations).

**Example Use Case**
--------------------

Suppose we have a dataset of customers with two features: age and income. We want to segment the customers into three clusters using K-means clustering.

| Age | Income |
| --- | --- |
| 25  | 50000 |
| 30  | 60000 |
| 35  | 70000 |
| ... | ...   |

We initialize three random centroids and iterate through the algorithm. After convergence, we obtain three clusters:

Cluster 1: Young adults with low income
Cluster 2: Middle-aged adults with medium income
Cluster 3: Older adults with high income

**Code Implementation**
----------------------

Here's a simple implementation of the K-means clustering algorithm in Python using scikit-learn:
```python
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Generate a sample dataset
np.random.seed(0)
data = np.random.rand(100, 2)

# Create a KMeans model with 3 clusters
kmeans = KMeans(n_clusters=3)

# Fit the model to the data
kmeans.fit(data)

# Get the cluster labels
labels = kmeans.labels_

# Plot the clusters
plt.scatter(data[:, 0], data[:, 1], c=labels)
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='*', s=200)
plt.show()
```
This code generates a sample dataset, creates a K-means model with 3 clusters, fits the model to the data, and plots the resulting clusters.