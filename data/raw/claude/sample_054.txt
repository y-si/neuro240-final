The main difference between a stack and a queue lies in the order in which elements are added and removed from the data structure.

Stack:
- A stack follows the Last In First Out (LIFO) principle.
- Elements are added to the top of the stack and removed from the top as well.
- The last element added to the stack is the first one to be removed.
- The primary operations of a stack are:
  - Push: Add an element to the top of the stack.
  - Pop: Remove the top element from the stack.
  - Peek or Top: Get the value of the top element without removing it.
- Real-life examples: Stack of plates, undo operation in text editors, function call stack in programming.

Queue:
- A queue follows the First In First Out (FIFO) principle.
- Elements are added to the back (rear) of the queue and removed from the front.
- The first element added to the queue is the first one to be removed.
- The primary operations of a queue are:
  - Enqueue: Add an element to the back of the queue.
  - Dequeue: Remove the front element from the queue.
  - Front: Get the value of the front element without removing it.
- Real-life examples: Waiting in line, job scheduling, message passing between processes.

In summary, a stack is like a pile of objects where you can only add or remove items from the top, while a queue is like a line of people where new people join at the back and leave from the front.

Both stacks and queues are fundamental data structures used in various algorithms and have different use cases depending on the problem at hand.